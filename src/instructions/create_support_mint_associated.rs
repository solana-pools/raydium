//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct CreateSupportMintAssociated {
    /// Address to be set as protocol owner.
    pub owner: solana_pubkey::Pubkey,
    /// Support token mint
    pub token_mint: solana_pubkey::Pubkey,
    /// Initialize support mint state account to store support mint address and bump.
    pub support_mint_associated: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl CreateSupportMintAssociated {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.owner, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.support_mint_associated,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CreateSupportMintAssociatedInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateSupportMintAssociatedInstructionData {
    discriminator: [u8; 8],
}

impl CreateSupportMintAssociatedInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [17, 251, 65, 92, 136, 242, 14, 169],
        }
    }
}

impl Default for CreateSupportMintAssociatedInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `CreateSupportMintAssociated`.
///
/// ### Accounts:
///
///   0. `[writable, signer, optional]` owner (default to `GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ`)
///   1. `[]` token_mint
///   2. `[writable]` support_mint_associated
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateSupportMintAssociatedBuilder {
    owner: Option<solana_pubkey::Pubkey>,
    token_mint: Option<solana_pubkey::Pubkey>,
    support_mint_associated: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateSupportMintAssociatedBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// `[optional account, default to 'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ']`
    /// Address to be set as protocol owner.
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// Support token mint
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    /// Initialize support mint state account to store support mint address and bump.
    #[inline(always)]
    pub fn support_mint_associated(
        &mut self,
        support_mint_associated: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.support_mint_associated = Some(support_mint_associated);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateSupportMintAssociated {
            owner: self.owner.unwrap_or(solana_pubkey::pubkey!(
                "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
            )),
            token_mint: self.token_mint.expect("token_mint is not set"),
            support_mint_associated: self
                .support_mint_associated
                .expect("support_mint_associated is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `create_support_mint_associated` CPI accounts.
pub struct CreateSupportMintAssociatedCpiAccounts<'a, 'b> {
    /// Address to be set as protocol owner.
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// Support token mint
    pub token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Initialize support mint state account to store support mint address and bump.
    pub support_mint_associated: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_support_mint_associated` CPI instruction.
pub struct CreateSupportMintAssociatedCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Address to be set as protocol owner.
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// Support token mint
    pub token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Initialize support mint state account to store support mint address and bump.
    pub support_mint_associated: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> CreateSupportMintAssociatedCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateSupportMintAssociatedCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            token_mint: accounts.token_mint,
            support_mint_associated: accounts.support_mint_associated,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.owner.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.support_mint_associated.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CreateSupportMintAssociatedInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.support_mint_associated.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateSupportMintAssociated` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[]` token_mint
///   2. `[writable]` support_mint_associated
///   3. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateSupportMintAssociatedCpiBuilder<'a, 'b> {
    instruction: Box<CreateSupportMintAssociatedCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateSupportMintAssociatedCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateSupportMintAssociatedCpiBuilderInstruction {
            __program: program,
            owner: None,
            token_mint: None,
            support_mint_associated: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Address to be set as protocol owner.
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// Support token mint
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    /// Initialize support mint state account to store support mint address and bump.
    #[inline(always)]
    pub fn support_mint_associated(
        &mut self,
        support_mint_associated: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.support_mint_associated = Some(support_mint_associated);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = CreateSupportMintAssociatedCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            support_mint_associated: self
                .instruction
                .support_mint_associated
                .expect("support_mint_associated is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateSupportMintAssociatedCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    support_mint_associated: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
